C51 COMPILER V9.00   WIMIDEVTIMERMANGER                                                    03/03/2017 21:32:05 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE WIMIDEVTIMERMANGER
OBJECT MODULE PLACED IN wimiDevTimerManger.obj
COMPILER INVOKED BY: I:\program\keil\C51\BIN\C51.EXE class\wimiDevTimerManger.c COMPACT ROM(COMPACT) BROWSE DEBUG OBJECT
                    -EXTEND PRINT(.\wimiDevTimerManger.lst) OBJECT(wimiDevTimerManger.obj)

line level    source

   1          
   2          #include"wimiDevTimerManger.h"
   3           TIMERMANGER _tmg;
   4          
   5           void TimerMangerInit(TIMERMANGER* __timerManger)
   6           {      
   7   1              unsigned char index=0;
   8   1              __timerManger->_size=0;
   9   1              __timerManger->_count=0;
  10   1              __timerManger->_maxcount=100;
  11   1              for(index=0;index<_TIMERPOOL_MAXSIZE;++index)
  12   1              {
  13   2                      __timerManger->_TIMERPOOL[index]._time=0;
  14   2                      __timerManger->_TIMERPOOL[index]._timeNow=0;
  15   2                      __timerManger->_TIMERPOOL[index]._enable=0;
  16   2                  __timerManger->_TIMERPOOL[index]._id=0;
  17   2                  __timerManger->_TIMERPOOL[index]._callback=0;
  18   2              }
  19   1       }
  20           void timerpump(TIMERMANGER* __timerManger)
  21           {
  22   1              __timerManger->_count++;
  23   1       }
  24           void ClockDistributer(TIMERMANGER* __timerManger)
  25           {
  26   1               if(__timerManger->_count>=__timerManger->_maxcount)
  27   1               {
  28   2                      __timerManger->_count=0;
  29   2                      TimerEventDistributer(__timerManger);
  30   2               }
  31   1       }
  32          void TimerEventDistributer(TIMERMANGER* __timerManger)
  33          {
  34   1              unsigned char index=0;          
  35   1              for(index=0;index<__timerManger->_size;++index)
  36   1              {       
  37   2                 __timerManger->_TIMERPOOL[index]._timeNow++;
  38   2                 if( __timerManger->_TIMERPOOL[index]._timeNow >= __timerManger->_TIMERPOOL[index]._time &&
  39   2                         __timerManger->_TIMERPOOL[index]._enable)
  40   2                 {
  41   3                        __timerManger->_TIMERPOOL[index]._timeNow=0;
  42   3                        __timerManger->_TIMERPOOL[index]._callback();
  43   3                 }
  44   2              }
  45   1      }
  46          
  47           void CreateTimer(TIMERMANGER* __timerManger,unsigned char id,unsigned char time,TimerCallBack callback,TI
             -MER *timerout)
  48           {      
  49   1              if(__timerManger->_size >= _TIMERPOOL_MAXSIZE)
  50   1              {
  51   2                      SendString("_size to big\r\n");
  52   2                      return;
  53   2              }
C51 COMPILER V9.00   WIMIDEVTIMERMANGER                                                    03/03/2017 21:32:05 PAGE 2   

  54   1              timerout=&__timerManger->_TIMERPOOL[__timerManger->_size];
  55   1              __timerManger->_size ++;
  56   1              timerout->_id=id;
  57   1              timerout->_time=time;
  58   1              timerout->_enable=1;
  59   1              timerout->_callback = callback;
  60   1       }
  61           void EnableTimer(TIMERMANGER* __timerManger,unsigned char id,unsigned char enable)
  62           {
  63   1              unsigned char index =0;
  64   1              for(index = 0;index<__timerManger->_size;index++)
  65   1              {
  66   2                      if(__timerManger->_TIMERPOOL[index]._id == id)
  67   2                      {
  68   3                              __timerManger->_TIMERPOOL[index]._enable = enable;
  69   3                      }
  70   2              }
  71   1       }
  72           void RemoveTimer(TIMERMANGER* __timerManger,unsigned char id)
  73           {
  74   1              int _index=0;
  75   1              //≤È’“
  76   1              while(_index<__timerManger->_size)
  77   1              {
  78   2                      if(__timerManger->_TIMERPOOL[_index]._id == id)
  79   2                      {
  80   3                               __timerManger->_size--;
  81   3                               break;
  82   3                      }
  83   2                      _index++;
  84   2              }
  85   1              //…ÓøΩ±¥
  86   1              for(;_index<__timerManger->_size;_index++)
  87   1              {
  88   2                      __timerManger->_TIMERPOOL[_index]._time=__timerManger->_TIMERPOOL[_index+1]._time;
  89   2                      __timerManger->_TIMERPOOL[_index]._timeNow=__timerManger->_TIMERPOOL[_index+1]._timeNow;
  90   2                      __timerManger->_TIMERPOOL[_index]._enable=__timerManger->_TIMERPOOL[_index+1]._enable;
  91   2                  __timerManger->_TIMERPOOL[_index]._id=__timerManger->_TIMERPOOL[_index+1]._id;
  92   2                  __timerManger->_TIMERPOOL[_index]._callback=__timerManger->_TIMERPOOL[_index+1]._callback;
  93   2              }
  94   1       }
  95           void DumpTimerManager(TIMERMANGER* _tmg)
  96           {
  97   1                char str[20];
  98   1                SendString("--------DumpTimerManager-------\r\n");
  99   1                sprintf(str,"size = %d",(int)_tmg->_size);
 100   1                 SendString(str);SendString("\r\n");//SendData(_tmg->_size+'0');
 101   1      
 102   1                sprintf(str,"count = %d",_tmg->_count);
 103   1                SendString(str);SendString("\r\n");
 104   1      
 105   1                sprintf(str,"maxcount = %d",_tmg->_maxcount);
 106   1                SendString(str);SendString("\r\n");
 107   1                sprintf(str,"poolsize = %d",(int)sizeof(_tmg->_TIMERPOOL));
 108   1                SendString(str);SendString("\r\n");
 109   1                SendString("--------end-------\r\n");
 110   1      
 111   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1136    ----
C51 COMPILER V9.00   WIMIDEVTIMERMANGER                                                    03/03/2017 21:32:05 PAGE 3   

   CONSTANT SIZE    =    122    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     33      54
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
